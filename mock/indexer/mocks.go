// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/polkadothub-indexer/indexer (interfaces: AccountEraPersistorTaskStore,BlockSeqPersistorTaskStore,ConfigParser,EventSeqPersistorTaskStore,FetcherClient,ReportStore,SyncerPersistorTaskStore,ValidatorAggCreatorTaskStore,ValidatorAggPersistorTaskStore,ValidatorEraSeqPersistorTaskStore,ValidatorSessionSeqPersistorTaskStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	pipeline "github.com/figment-networks/indexing-engine/pipeline"
	model "github.com/figment-networks/polkadothub-indexer/model"
	heightpb "github.com/figment-networks/polkadothub-proxy/grpc/height/heightpb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountEraPersistorTaskStore is a mock of AccountEraPersistorTaskStore interface
type MockAccountEraPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountEraPersistorTaskStoreMockRecorder
}

// MockAccountEraPersistorTaskStoreMockRecorder is the mock recorder for MockAccountEraPersistorTaskStore
type MockAccountEraPersistorTaskStoreMockRecorder struct {
	mock *MockAccountEraPersistorTaskStore
}

// NewMockAccountEraPersistorTaskStore creates a new mock instance
func NewMockAccountEraPersistorTaskStore(ctrl *gomock.Controller) *MockAccountEraPersistorTaskStore {
	mock := &MockAccountEraPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockAccountEraPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountEraPersistorTaskStore) EXPECT() *MockAccountEraPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountEraPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountEraPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountEraPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockAccountEraPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountEraPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountEraPersistorTaskStore)(nil).Save), arg0)
}

// MockBlockSeqPersistorTaskStore is a mock of BlockSeqPersistorTaskStore interface
type MockBlockSeqPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqPersistorTaskStoreMockRecorder
}

// MockBlockSeqPersistorTaskStoreMockRecorder is the mock recorder for MockBlockSeqPersistorTaskStore
type MockBlockSeqPersistorTaskStoreMockRecorder struct {
	mock *MockBlockSeqPersistorTaskStore
}

// NewMockBlockSeqPersistorTaskStore creates a new mock instance
func NewMockBlockSeqPersistorTaskStore(ctrl *gomock.Controller) *MockBlockSeqPersistorTaskStore {
	mock := &MockBlockSeqPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockBlockSeqPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeqPersistorTaskStore) EXPECT() *MockBlockSeqPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBlockSeqPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBlockSeqPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockSeqPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockBlockSeqPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBlockSeqPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockSeqPersistorTaskStore)(nil).Save), arg0)
}

// MockConfigParser is a mock of ConfigParser interface
type MockConfigParser struct {
	ctrl     *gomock.Controller
	recorder *MockConfigParserMockRecorder
}

// MockConfigParserMockRecorder is the mock recorder for MockConfigParser
type MockConfigParserMockRecorder struct {
	mock *MockConfigParser
}

// NewMockConfigParser creates a new mock instance
func NewMockConfigParser(ctrl *gomock.Controller) *MockConfigParser {
	mock := &MockConfigParser{ctrl: ctrl}
	mock.recorder = &MockConfigParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigParser) EXPECT() *MockConfigParserMockRecorder {
	return m.recorder
}

// GetAllAvailableTasks mocks base method
func (m *MockConfigParser) GetAllAvailableTasks() []pipeline.TaskName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAvailableTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	return ret0
}

// GetAllAvailableTasks indicates an expected call of GetAllAvailableTasks
func (mr *MockConfigParserMockRecorder) GetAllAvailableTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAvailableTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllAvailableTasks))
}

// GetAllVersionedTasks mocks base method
func (m *MockConfigParser) GetAllVersionedTasks() ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVersionedTasks indicates an expected call of GetAllVersionedTasks
func (mr *MockConfigParserMockRecorder) GetAllVersionedTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedTasks))
}

// GetAllVersionedVersionIds mocks base method
func (m *MockConfigParser) GetAllVersionedVersionIds() []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedVersionIds")
	ret0, _ := ret[0].([]int64)
	return ret0
}

// GetAllVersionedVersionIds indicates an expected call of GetAllVersionedVersionIds
func (mr *MockConfigParserMockRecorder) GetAllVersionedVersionIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedVersionIds))
}

// GetCurrentVersionId mocks base method
func (m *MockConfigParser) GetCurrentVersionId() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersionId")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCurrentVersionId indicates an expected call of GetCurrentVersionId
func (mr *MockConfigParserMockRecorder) GetCurrentVersionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersionId", reflect.TypeOf((*MockConfigParser)(nil).GetCurrentVersionId))
}

// GetTasksByTargetIds mocks base method
func (m *MockConfigParser) GetTasksByTargetIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByTargetIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByTargetIds indicates an expected call of GetTasksByTargetIds
func (mr *MockConfigParserMockRecorder) GetTasksByTargetIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByTargetIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByTargetIds), arg0)
}

// GetTasksByVersionIds mocks base method
func (m *MockConfigParser) GetTasksByVersionIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByVersionIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByVersionIds indicates an expected call of GetTasksByVersionIds
func (mr *MockConfigParserMockRecorder) GetTasksByVersionIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByVersionIds), arg0)
}

// IsAnyVersionSequential mocks base method
func (m *MockConfigParser) IsAnyVersionSequential(arg0 []int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAnyVersionSequential", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAnyVersionSequential indicates an expected call of IsAnyVersionSequential
func (mr *MockConfigParserMockRecorder) IsAnyVersionSequential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnyVersionSequential", reflect.TypeOf((*MockConfigParser)(nil).IsAnyVersionSequential), arg0)
}

// MockEventSeqPersistorTaskStore is a mock of EventSeqPersistorTaskStore interface
type MockEventSeqPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventSeqPersistorTaskStoreMockRecorder
}

// MockEventSeqPersistorTaskStoreMockRecorder is the mock recorder for MockEventSeqPersistorTaskStore
type MockEventSeqPersistorTaskStoreMockRecorder struct {
	mock *MockEventSeqPersistorTaskStore
}

// NewMockEventSeqPersistorTaskStore creates a new mock instance
func NewMockEventSeqPersistorTaskStore(ctrl *gomock.Controller) *MockEventSeqPersistorTaskStore {
	mock := &MockEventSeqPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockEventSeqPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventSeqPersistorTaskStore) EXPECT() *MockEventSeqPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEventSeqPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEventSeqPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventSeqPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockEventSeqPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockEventSeqPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEventSeqPersistorTaskStore)(nil).Save), arg0)
}

// MockFetcherClient is a mock of FetcherClient interface
type MockFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherClientMockRecorder
}

// MockFetcherClientMockRecorder is the mock recorder for MockFetcherClient
type MockFetcherClientMockRecorder struct {
	mock *MockFetcherClient
}

// NewMockFetcherClient creates a new mock instance
func NewMockFetcherClient(ctrl *gomock.Controller) *MockFetcherClient {
	mock := &MockFetcherClient{ctrl: ctrl}
	mock.recorder = &MockFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherClient) EXPECT() *MockFetcherClientMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockFetcherClient) GetAll(arg0 int64) (*heightpb.GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*heightpb.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockFetcherClientMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFetcherClient)(nil).GetAll), arg0)
}

// MockReportStore is a mock of ReportStore interface
type MockReportStore struct {
	ctrl     *gomock.Controller
	recorder *MockReportStoreMockRecorder
}

// MockReportStoreMockRecorder is the mock recorder for MockReportStore
type MockReportStoreMockRecorder struct {
	mock *MockReportStore
}

// NewMockReportStore creates a new mock instance
func NewMockReportStore(ctrl *gomock.Controller) *MockReportStore {
	mock := &MockReportStore{ctrl: ctrl}
	mock.recorder = &MockReportStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportStore) EXPECT() *MockReportStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReportStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportStore)(nil).Create), arg0)
}

// FindNotCompletedByIndexVersion mocks base method
func (m *MockReportStore) FindNotCompletedByIndexVersion(arg0 int64, arg1 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByIndexVersion", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByIndexVersion indicates an expected call of FindNotCompletedByIndexVersion
func (mr *MockReportStoreMockRecorder) FindNotCompletedByIndexVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByIndexVersion", reflect.TypeOf((*MockReportStore)(nil).FindNotCompletedByIndexVersion), varargs...)
}

// Save mocks base method
func (m *MockReportStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockReportStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReportStore)(nil).Save), arg0)
}

// MockSyncerPersistorTaskStore is a mock of SyncerPersistorTaskStore interface
type MockSyncerPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerPersistorTaskStoreMockRecorder
}

// MockSyncerPersistorTaskStoreMockRecorder is the mock recorder for MockSyncerPersistorTaskStore
type MockSyncerPersistorTaskStoreMockRecorder struct {
	mock *MockSyncerPersistorTaskStore
}

// NewMockSyncerPersistorTaskStore creates a new mock instance
func NewMockSyncerPersistorTaskStore(ctrl *gomock.Controller) *MockSyncerPersistorTaskStore {
	mock := &MockSyncerPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockSyncerPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncerPersistorTaskStore) EXPECT() *MockSyncerPersistorTaskStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncerPersistorTaskStore) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncerPersistorTaskStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncerPersistorTaskStore)(nil).CreateOrUpdate), arg0)
}

// MockValidatorAggCreatorTaskStore is a mock of ValidatorAggCreatorTaskStore interface
type MockValidatorAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggCreatorTaskStoreMockRecorder
}

// MockValidatorAggCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorAggCreatorTaskStore
type MockValidatorAggCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorAggCreatorTaskStore
}

// NewMockValidatorAggCreatorTaskStore creates a new mock instance
func NewMockValidatorAggCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorAggCreatorTaskStore {
	mock := &MockValidatorAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggCreatorTaskStore) EXPECT() *MockValidatorAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByStashAccount mocks base method
func (m *MockValidatorAggCreatorTaskStore) FindByStashAccount(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStashAccount", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStashAccount indicates an expected call of FindByStashAccount
func (mr *MockValidatorAggCreatorTaskStoreMockRecorder) FindByStashAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStashAccount", reflect.TypeOf((*MockValidatorAggCreatorTaskStore)(nil).FindByStashAccount), arg0)
}

// MockValidatorAggPersistorTaskStore is a mock of ValidatorAggPersistorTaskStore interface
type MockValidatorAggPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggPersistorTaskStoreMockRecorder
}

// MockValidatorAggPersistorTaskStoreMockRecorder is the mock recorder for MockValidatorAggPersistorTaskStore
type MockValidatorAggPersistorTaskStoreMockRecorder struct {
	mock *MockValidatorAggPersistorTaskStore
}

// NewMockValidatorAggPersistorTaskStore creates a new mock instance
func NewMockValidatorAggPersistorTaskStore(ctrl *gomock.Controller) *MockValidatorAggPersistorTaskStore {
	mock := &MockValidatorAggPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggPersistorTaskStore) EXPECT() *MockValidatorAggPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorAggPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAggPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockValidatorAggPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAggPersistorTaskStore)(nil).Save), arg0)
}

// MockValidatorEraSeqPersistorTaskStore is a mock of ValidatorEraSeqPersistorTaskStore interface
type MockValidatorEraSeqPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorEraSeqPersistorTaskStoreMockRecorder
}

// MockValidatorEraSeqPersistorTaskStoreMockRecorder is the mock recorder for MockValidatorEraSeqPersistorTaskStore
type MockValidatorEraSeqPersistorTaskStoreMockRecorder struct {
	mock *MockValidatorEraSeqPersistorTaskStore
}

// NewMockValidatorEraSeqPersistorTaskStore creates a new mock instance
func NewMockValidatorEraSeqPersistorTaskStore(ctrl *gomock.Controller) *MockValidatorEraSeqPersistorTaskStore {
	mock := &MockValidatorEraSeqPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorEraSeqPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorEraSeqPersistorTaskStore) EXPECT() *MockValidatorEraSeqPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorEraSeqPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorEraSeqPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorEraSeqPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockValidatorEraSeqPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorEraSeqPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorEraSeqPersistorTaskStore)(nil).Save), arg0)
}

// MockValidatorSessionSeqPersistorTaskStore is a mock of ValidatorSessionSeqPersistorTaskStore interface
type MockValidatorSessionSeqPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSessionSeqPersistorTaskStoreMockRecorder
}

// MockValidatorSessionSeqPersistorTaskStoreMockRecorder is the mock recorder for MockValidatorSessionSeqPersistorTaskStore
type MockValidatorSessionSeqPersistorTaskStoreMockRecorder struct {
	mock *MockValidatorSessionSeqPersistorTaskStore
}

// NewMockValidatorSessionSeqPersistorTaskStore creates a new mock instance
func NewMockValidatorSessionSeqPersistorTaskStore(ctrl *gomock.Controller) *MockValidatorSessionSeqPersistorTaskStore {
	mock := &MockValidatorSessionSeqPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSessionSeqPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSessionSeqPersistorTaskStore) EXPECT() *MockValidatorSessionSeqPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorSessionSeqPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorSessionSeqPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorSessionSeqPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockValidatorSessionSeqPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorSessionSeqPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorSessionSeqPersistorTaskStore)(nil).Save), arg0)
}
