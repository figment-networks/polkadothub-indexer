// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/polkadothub-indexer/indexer (interfaces: BlockFetcherClient,ValidatorPerformanceFetcherClient,StakingFetcherClient,EventFetcherClient)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	blockpb "github.com/figment-networks/polkadothub-proxy/grpc/block/blockpb"
	eventpb "github.com/figment-networks/polkadothub-proxy/grpc/event/eventpb"
	stakingpb "github.com/figment-networks/polkadothub-proxy/grpc/staking/stakingpb"
	validatorperformancepb "github.com/figment-networks/polkadothub-proxy/grpc/validatorperformance/validatorperformancepb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockFetcherClient is a mock of BlockFetcherClient interface
type MockBlockFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockFetcherClientMockRecorder
}

// MockBlockFetcherClientMockRecorder is the mock recorder for MockBlockFetcherClient
type MockBlockFetcherClientMockRecorder struct {
	mock *MockBlockFetcherClient
}

// NewMockBlockFetcherClient creates a new mock instance
func NewMockBlockFetcherClient(ctrl *gomock.Controller) *MockBlockFetcherClient {
	mock := &MockBlockFetcherClient{ctrl: ctrl}
	mock.recorder = &MockBlockFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockFetcherClient) EXPECT() *MockBlockFetcherClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockBlockFetcherClient) GetByHeight(arg0 int64) (*blockpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*blockpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockBlockFetcherClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockBlockFetcherClient)(nil).GetByHeight), arg0)
}

// MockValidatorPerformanceFetcherClient is a mock of ValidatorPerformanceFetcherClient interface
type MockValidatorPerformanceFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorPerformanceFetcherClientMockRecorder
}

// MockValidatorPerformanceFetcherClientMockRecorder is the mock recorder for MockValidatorPerformanceFetcherClient
type MockValidatorPerformanceFetcherClientMockRecorder struct {
	mock *MockValidatorPerformanceFetcherClient
}

// NewMockValidatorPerformanceFetcherClient creates a new mock instance
func NewMockValidatorPerformanceFetcherClient(ctrl *gomock.Controller) *MockValidatorPerformanceFetcherClient {
	mock := &MockValidatorPerformanceFetcherClient{ctrl: ctrl}
	mock.recorder = &MockValidatorPerformanceFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorPerformanceFetcherClient) EXPECT() *MockValidatorPerformanceFetcherClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockValidatorPerformanceFetcherClient) GetByHeight(arg0 int64) (*validatorperformancepb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*validatorperformancepb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockValidatorPerformanceFetcherClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockValidatorPerformanceFetcherClient)(nil).GetByHeight), arg0)
}

// MockStakingFetcherClient is a mock of StakingFetcherClient interface
type MockStakingFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockStakingFetcherClientMockRecorder
}

// MockStakingFetcherClientMockRecorder is the mock recorder for MockStakingFetcherClient
type MockStakingFetcherClientMockRecorder struct {
	mock *MockStakingFetcherClient
}

// NewMockStakingFetcherClient creates a new mock instance
func NewMockStakingFetcherClient(ctrl *gomock.Controller) *MockStakingFetcherClient {
	mock := &MockStakingFetcherClient{ctrl: ctrl}
	mock.recorder = &MockStakingFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingFetcherClient) EXPECT() *MockStakingFetcherClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockStakingFetcherClient) GetByHeight(arg0 int64) (*stakingpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*stakingpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockStakingFetcherClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockStakingFetcherClient)(nil).GetByHeight), arg0)
}

// MockEventFetcherClient is a mock of EventFetcherClient interface
type MockEventFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventFetcherClientMockRecorder
}

// MockEventFetcherClientMockRecorder is the mock recorder for MockEventFetcherClient
type MockEventFetcherClientMockRecorder struct {
	mock *MockEventFetcherClient
}

// NewMockEventFetcherClient creates a new mock instance
func NewMockEventFetcherClient(ctrl *gomock.Controller) *MockEventFetcherClient {
	mock := &MockEventFetcherClient{ctrl: ctrl}
	mock.recorder = &MockEventFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventFetcherClient) EXPECT() *MockEventFetcherClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockEventFetcherClient) GetByHeight(arg0 int64) (*eventpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*eventpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockEventFetcherClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockEventFetcherClient)(nil).GetByHeight), arg0)
}
