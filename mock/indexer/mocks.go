// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/polkadothub-indexer/indexer (interfaces: ConfigParser,FetcherClient,ReportStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	pipeline "github.com/figment-networks/indexing-engine/pipeline"
	model "github.com/figment-networks/polkadothub-indexer/model"
	heightpb "github.com/figment-networks/polkadothub-proxy/grpc/height/heightpb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigParser is a mock of ConfigParser interface
type MockConfigParser struct {
	ctrl     *gomock.Controller
	recorder *MockConfigParserMockRecorder
}

// MockConfigParserMockRecorder is the mock recorder for MockConfigParser
type MockConfigParserMockRecorder struct {
	mock *MockConfigParser
}

// NewMockConfigParser creates a new mock instance
func NewMockConfigParser(ctrl *gomock.Controller) *MockConfigParser {
	mock := &MockConfigParser{ctrl: ctrl}
	mock.recorder = &MockConfigParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigParser) EXPECT() *MockConfigParserMockRecorder {
	return m.recorder
}

// GetAllAvailableTasks mocks base method
func (m *MockConfigParser) GetAllAvailableTasks() []pipeline.TaskName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAvailableTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	return ret0
}

// GetAllAvailableTasks indicates an expected call of GetAllAvailableTasks
func (mr *MockConfigParserMockRecorder) GetAllAvailableTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAvailableTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllAvailableTasks))
}

// GetAllVersionedTasks mocks base method
func (m *MockConfigParser) GetAllVersionedTasks() ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVersionedTasks indicates an expected call of GetAllVersionedTasks
func (mr *MockConfigParserMockRecorder) GetAllVersionedTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedTasks))
}

// GetAllVersionedVersionIds mocks base method
func (m *MockConfigParser) GetAllVersionedVersionIds() []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedVersionIds")
	ret0, _ := ret[0].([]int64)
	return ret0
}

// GetAllVersionedVersionIds indicates an expected call of GetAllVersionedVersionIds
func (mr *MockConfigParserMockRecorder) GetAllVersionedVersionIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedVersionIds))
}

// GetCurrentVersionId mocks base method
func (m *MockConfigParser) GetCurrentVersionId() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersionId")
	ret0, _ := ret[0].(int64)
	return ret0
}

// IsLastInSession mocks base method
func (m *MockConfigParser) IsLastInSession() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLastInSession")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLastInEra mocks base method
func (m *MockConfigParser) IsLastInEra() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLastInEra")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetWhiteListStages mocks base method
func (m *MockConfigParser) GetWhiteListStages() []pipeline.StageName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhiteListStages")
	ret0, _ := ret[0].([]pipeline.StageName)
	return ret0
}
// GetCurrentVersionId indicates an expected call of GetCurrentVersionId
func (mr *MockConfigParserMockRecorder) GetCurrentVersionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersionId", reflect.TypeOf((*MockConfigParser)(nil).GetCurrentVersionId))
}

// IsLastInSession indicates an expected call of IsForLastOfSessionsByVersionId
func (mr *MockConfigParserMockRecorder) IsLastInSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLastInSession", reflect.TypeOf((*MockConfigParser)(nil).IsLastInSession))
}

// IsLastInEra indicates an expected call of IsForLastOfErasByVersionId
func (mr *MockConfigParserMockRecorder) IsLastInEra() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLastInEra", reflect.TypeOf((*MockConfigParser)(nil).IsLastInEra))
}

// GetWhiteListStages indicates an expected call of GetWhiteListStages
func (mr *MockConfigParserMockRecorder) GetWhiteListStages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhiteListStages", reflect.TypeOf((*MockConfigParser)(nil).GetWhiteListStages))
}

// GetTasksByTargetIds mocks base method
func (m *MockConfigParser) GetTasksByTargetIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByTargetIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByTargetIds indicates an expected call of GetTasksByTargetIds
func (mr *MockConfigParserMockRecorder) GetTasksByTargetIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByTargetIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByTargetIds), arg0)
}

// GetTasksByVersionIds mocks base method
func (m *MockConfigParser) GetTasksByVersionIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByVersionIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByVersionIds indicates an expected call of GetTasksByVersionIds
func (mr *MockConfigParserMockRecorder) GetTasksByVersionIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByVersionIds), arg0)
}

// IsAnyVersionSequential mocks base method
func (m *MockConfigParser) IsAnyVersionSequential(arg0 []int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAnyVersionSequential", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAnyVersionSequential indicates an expected call of IsAnyVersionSequential
func (mr *MockConfigParserMockRecorder) IsAnyVersionSequential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnyVersionSequential", reflect.TypeOf((*MockConfigParser)(nil).IsAnyVersionSequential), arg0)
}

// MockFetcherClient is a mock of FetcherClient interface
type MockFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherClientMockRecorder
}

// MockFetcherClientMockRecorder is the mock recorder for MockFetcherClient
type MockFetcherClientMockRecorder struct {
	mock *MockFetcherClient
}

// NewMockFetcherClient creates a new mock instance
func NewMockFetcherClient(ctrl *gomock.Controller) *MockFetcherClient {
	mock := &MockFetcherClient{ctrl: ctrl}
	mock.recorder = &MockFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherClient) EXPECT() *MockFetcherClientMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockFetcherClient) GetAll(arg0 int64) (*heightpb.GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*heightpb.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockFetcherClientMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFetcherClient)(nil).GetAll), arg0)
}

// MockReportStore is a mock of ReportStore interface
type MockReportStore struct {
	ctrl     *gomock.Controller
	recorder *MockReportStoreMockRecorder
}

// MockReportStoreMockRecorder is the mock recorder for MockReportStore
type MockReportStoreMockRecorder struct {
	mock *MockReportStore
}

// NewMockReportStore creates a new mock instance
func NewMockReportStore(ctrl *gomock.Controller) *MockReportStore {
	mock := &MockReportStore{ctrl: ctrl}
	mock.recorder = &MockReportStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportStore) EXPECT() *MockReportStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReportStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportStore)(nil).Create), arg0)
}

// FindNotCompletedByIndexVersion mocks base method
func (m *MockReportStore) FindNotCompletedByIndexVersion(arg0 int64, arg1 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByIndexVersion", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByIndexVersion indicates an expected call of FindNotCompletedByIndexVersion
func (mr *MockReportStoreMockRecorder) FindNotCompletedByIndexVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByIndexVersion", reflect.TypeOf((*MockReportStore)(nil).FindNotCompletedByIndexVersion), varargs...)
}

// Save mocks base method
func (m *MockReportStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockReportStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReportStore)(nil).Save), arg0)
}
