// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/polkadothub-indexer/store (interfaces: AccountEraSeq,BlockSeq,BlockSummary,Database,EventSeq,Reports,Rewards,Syncables,SystemEvents,TransactionSeq,ValidatorAgg,ValidatorSeq,ValidatorEraSeq,ValidatorSessionSeq,ValidatorSummary)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	model "github.com/figment-networks/polkadothub-indexer/model"
	store "github.com/figment-networks/polkadothub-indexer/store"
	types "github.com/figment-networks/polkadothub-indexer/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAccountEraSeq is a mock of AccountEraSeq interface
type MockAccountEraSeq struct {
	ctrl     *gomock.Controller
	recorder *MockAccountEraSeqMockRecorder
}

// MockAccountEraSeqMockRecorder is the mock recorder for MockAccountEraSeq
type MockAccountEraSeqMockRecorder struct {
	mock *MockAccountEraSeq
}

// NewMockAccountEraSeq creates a new mock instance
func NewMockAccountEraSeq(ctrl *gomock.Controller) *MockAccountEraSeq {
	mock := &MockAccountEraSeq{ctrl: ctrl}
	mock.recorder = &MockAccountEraSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountEraSeq) EXPECT() *MockAccountEraSeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockAccountEraSeq) BulkUpsert(arg0 []model.AccountEraSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockAccountEraSeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockAccountEraSeq)(nil).BulkUpsert), arg0)
}

// FindByEra mocks base method
func (m *MockAccountEraSeq) FindByEra(arg0 int64) ([]model.AccountEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEra", arg0)
	ret0, _ := ret[0].([]model.AccountEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEra indicates an expected call of FindByEra
func (mr *MockAccountEraSeqMockRecorder) FindByEra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEra", reflect.TypeOf((*MockAccountEraSeq)(nil).FindByEra), arg0)
}

// FindLastByStashAccount mocks base method
func (m *MockAccountEraSeq) FindLastByStashAccount(arg0 string) ([]model.AccountEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByStashAccount", arg0)
	ret0, _ := ret[0].([]model.AccountEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByStashAccount indicates an expected call of FindLastByStashAccount
func (mr *MockAccountEraSeqMockRecorder) FindLastByStashAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByStashAccount", reflect.TypeOf((*MockAccountEraSeq)(nil).FindLastByStashAccount), arg0)
}

// FindLastByValidatorStashAccount mocks base method
func (m *MockAccountEraSeq) FindLastByValidatorStashAccount(arg0 string) ([]model.AccountEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByValidatorStashAccount", arg0)
	ret0, _ := ret[0].([]model.AccountEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByValidatorStashAccount indicates an expected call of FindLastByValidatorStashAccount
func (mr *MockAccountEraSeqMockRecorder) FindLastByValidatorStashAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByValidatorStashAccount", reflect.TypeOf((*MockAccountEraSeq)(nil).FindLastByValidatorStashAccount), arg0)
}

// MockBlockSeq is a mock of BlockSeq interface
type MockBlockSeq struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqMockRecorder
}

// MockBlockSeqMockRecorder is the mock recorder for MockBlockSeq
type MockBlockSeqMockRecorder struct {
	mock *MockBlockSeq
}

// NewMockBlockSeq creates a new mock instance
func NewMockBlockSeq(ctrl *gomock.Controller) *MockBlockSeq {
	mock := &MockBlockSeq{ctrl: ctrl}
	mock.recorder = &MockBlockSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeq) EXPECT() *MockBlockSeqMockRecorder {
	return m.recorder
}

// CreateSeq mocks base method
func (m *MockBlockSeq) CreateSeq(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeq", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeq indicates an expected call of CreateSeq
func (mr *MockBlockSeqMockRecorder) CreateSeq(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeq", reflect.TypeOf((*MockBlockSeq)(nil).CreateSeq), arg0)
}

// DeleteSeqOlderThan mocks base method
func (m *MockBlockSeq) DeleteSeqOlderThan(arg0 time.Time, arg1 []store.ActivityPeriodRow) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeqOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSeqOlderThan indicates an expected call of DeleteSeqOlderThan
func (mr *MockBlockSeqMockRecorder) DeleteSeqOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeqOlderThan", reflect.TypeOf((*MockBlockSeq)(nil).DeleteSeqOlderThan), arg0, arg1)
}

// FindMostRecentSeq mocks base method
func (m *MockBlockSeq) FindMostRecentSeq() (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentSeq")
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentSeq indicates an expected call of FindMostRecentSeq
func (mr *MockBlockSeqMockRecorder) FindMostRecentSeq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentSeq", reflect.TypeOf((*MockBlockSeq)(nil).FindMostRecentSeq))
}

// FindSeqByHeight mocks base method
func (m *MockBlockSeq) FindSeqByHeight(arg0 int64) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSeqByHeight", arg0)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSeqByHeight indicates an expected call of FindSeqByHeight
func (mr *MockBlockSeqMockRecorder) FindSeqByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSeqByHeight", reflect.TypeOf((*MockBlockSeq)(nil).FindSeqByHeight), arg0)
}

// GetAvgRecentTimes mocks base method
func (m *MockBlockSeq) GetAvgRecentTimes(arg0 int64) store.GetAvgRecentTimesResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgRecentTimes", arg0)
	ret0, _ := ret[0].(store.GetAvgRecentTimesResult)
	return ret0
}

// GetAvgRecentTimes indicates an expected call of GetAvgRecentTimes
func (mr *MockBlockSeqMockRecorder) GetAvgRecentTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgRecentTimes", reflect.TypeOf((*MockBlockSeq)(nil).GetAvgRecentTimes), arg0)
}

// SaveSeq mocks base method
func (m *MockBlockSeq) SaveSeq(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeq", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSeq indicates an expected call of SaveSeq
func (mr *MockBlockSeqMockRecorder) SaveSeq(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeq", reflect.TypeOf((*MockBlockSeq)(nil).SaveSeq), arg0)
}

// Summarize mocks base method
func (m *MockBlockSeq) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]model.BlockSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]model.BlockSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockBlockSeqMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockBlockSeq)(nil).Summarize), arg0, arg1)
}

// MockBlockSummary is a mock of BlockSummary interface
type MockBlockSummary struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSummaryMockRecorder
}

// MockBlockSummaryMockRecorder is the mock recorder for MockBlockSummary
type MockBlockSummaryMockRecorder struct {
	mock *MockBlockSummary
}

// NewMockBlockSummary creates a new mock instance
func NewMockBlockSummary(ctrl *gomock.Controller) *MockBlockSummary {
	mock := &MockBlockSummary{ctrl: ctrl}
	mock.recorder = &MockBlockSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSummary) EXPECT() *MockBlockSummaryMockRecorder {
	return m.recorder
}

// CreateSummary mocks base method
func (m *MockBlockSummary) CreateSummary(arg0 *model.BlockSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSummary indicates an expected call of CreateSummary
func (mr *MockBlockSummaryMockRecorder) CreateSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSummary", reflect.TypeOf((*MockBlockSummary)(nil).CreateSummary), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockBlockSummary) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockBlockSummaryMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockBlockSummary)(nil).DeleteOlderThan), arg0, arg1)
}

// FindActivityPeriods mocks base method
func (m *MockBlockSummary) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockBlockSummaryMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockBlockSummary)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecentByInterval mocks base method
func (m *MockBlockSummary) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockBlockSummaryMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockBlockSummary)(nil).FindMostRecentByInterval), arg0)
}

// FindMostRecentSummary mocks base method
func (m *MockBlockSummary) FindMostRecentSummary() (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentSummary")
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentSummary indicates an expected call of FindMostRecentSummary
func (mr *MockBlockSummaryMockRecorder) FindMostRecentSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentSummary", reflect.TypeOf((*MockBlockSummary)(nil).FindMostRecentSummary))
}

// FindSummaries mocks base method
func (m *MockBlockSummary) FindSummaries(arg0 types.SummaryInterval, arg1 string) ([]model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaries", arg0, arg1)
	ret0, _ := ret[0].([]model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaries indicates an expected call of FindSummaries
func (mr *MockBlockSummaryMockRecorder) FindSummaries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaries", reflect.TypeOf((*MockBlockSummary)(nil).FindSummaries), arg0, arg1)
}

// FindSummary mocks base method
func (m *MockBlockSummary) FindSummary(arg0 *model.BlockSummary) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockBlockSummaryMockRecorder) FindSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockBlockSummary)(nil).FindSummary), arg0)
}

// SaveSummary mocks base method
func (m *MockBlockSummary) SaveSummary(arg0 *model.BlockSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSummary indicates an expected call of SaveSummary
func (mr *MockBlockSummaryMockRecorder) SaveSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSummary", reflect.TypeOf((*MockBlockSummary)(nil).SaveSummary), arg0)
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetTotalSize mocks base method
func (m *MockDatabase) GetTotalSize() (*store.GetTotalSizeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSize")
	ret0, _ := ret[0].(*store.GetTotalSizeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSize indicates an expected call of GetTotalSize
func (mr *MockDatabaseMockRecorder) GetTotalSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSize", reflect.TypeOf((*MockDatabase)(nil).GetTotalSize))
}

// MockEventSeq is a mock of EventSeq interface
type MockEventSeq struct {
	ctrl     *gomock.Controller
	recorder *MockEventSeqMockRecorder
}

// MockEventSeqMockRecorder is the mock recorder for MockEventSeq
type MockEventSeqMockRecorder struct {
	mock *MockEventSeq
}

// NewMockEventSeq creates a new mock instance
func NewMockEventSeq(ctrl *gomock.Controller) *MockEventSeq {
	mock := &MockEventSeq{ctrl: ctrl}
	mock.recorder = &MockEventSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventSeq) EXPECT() *MockEventSeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockEventSeq) BulkUpsert(arg0 []model.EventSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockEventSeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockEventSeq)(nil).BulkUpsert), arg0)
}

// FindBalanceDeposits mocks base method
func (m *MockEventSeq) FindBalanceDeposits(arg0 string) ([]model.EventSeqWithTxHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBalanceDeposits", arg0)
	ret0, _ := ret[0].([]model.EventSeqWithTxHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBalanceDeposits indicates an expected call of FindBalanceDeposits
func (mr *MockEventSeqMockRecorder) FindBalanceDeposits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBalanceDeposits", reflect.TypeOf((*MockEventSeq)(nil).FindBalanceDeposits), arg0)
}

// FindBalanceTransfers mocks base method
func (m *MockEventSeq) FindBalanceTransfers(arg0 string) ([]model.EventSeqWithTxHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBalanceTransfers", arg0)
	ret0, _ := ret[0].([]model.EventSeqWithTxHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBalanceTransfers indicates an expected call of FindBalanceTransfers
func (mr *MockEventSeqMockRecorder) FindBalanceTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBalanceTransfers", reflect.TypeOf((*MockEventSeq)(nil).FindBalanceTransfers), arg0)
}

// FindBonded mocks base method
func (m *MockEventSeq) FindBonded(arg0 string) ([]model.EventSeqWithTxHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBonded", arg0)
	ret0, _ := ret[0].([]model.EventSeqWithTxHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBonded indicates an expected call of FindBonded
func (mr *MockEventSeqMockRecorder) FindBonded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBonded", reflect.TypeOf((*MockEventSeq)(nil).FindBonded), arg0)
}

// FindByHeightAndIndex mocks base method
func (m *MockEventSeq) FindByHeightAndIndex(arg0, arg1 int64) (*model.EventSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndIndex", arg0, arg1)
	ret0, _ := ret[0].(*model.EventSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndIndex indicates an expected call of FindByHeightAndIndex
func (mr *MockEventSeqMockRecorder) FindByHeightAndIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndIndex", reflect.TypeOf((*MockEventSeq)(nil).FindByHeightAndIndex), arg0, arg1)
}

// FindRewardsForTimePeriod mocks base method
func (m *MockEventSeq) FindRewardsForTimePeriod(arg0 string, arg1, arg2 time.Time) ([]model.EventSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRewardsForTimePeriod", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.EventSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRewardsForTimePeriod indicates an expected call of FindRewardsForTimePeriod
func (mr *MockEventSeqMockRecorder) FindRewardsForTimePeriod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRewardsForTimePeriod", reflect.TypeOf((*MockEventSeq)(nil).FindRewardsForTimePeriod), arg0, arg1, arg2)
}

// FindUnbonded mocks base method
func (m *MockEventSeq) FindUnbonded(arg0 string) ([]model.EventSeqWithTxHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnbonded", arg0)
	ret0, _ := ret[0].([]model.EventSeqWithTxHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnbonded indicates an expected call of FindUnbonded
func (mr *MockEventSeqMockRecorder) FindUnbonded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnbonded", reflect.TypeOf((*MockEventSeq)(nil).FindUnbonded), arg0)
}

// FindWithdrawn mocks base method
func (m *MockEventSeq) FindWithdrawn(arg0 string) ([]model.EventSeqWithTxHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithdrawn", arg0)
	ret0, _ := ret[0].([]model.EventSeqWithTxHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithdrawn indicates an expected call of FindWithdrawn
func (mr *MockEventSeqMockRecorder) FindWithdrawn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithdrawn", reflect.TypeOf((*MockEventSeq)(nil).FindWithdrawn), arg0)
}

// MockReports is a mock of Reports interface
type MockReports struct {
	ctrl     *gomock.Controller
	recorder *MockReportsMockRecorder
}

// MockReportsMockRecorder is the mock recorder for MockReports
type MockReportsMockRecorder struct {
	mock *MockReports
}

// NewMockReports creates a new mock instance
func NewMockReports(ctrl *gomock.Controller) *MockReports {
	mock := &MockReports{ctrl: ctrl}
	mock.recorder = &MockReportsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReports) EXPECT() *MockReportsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReports) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReports)(nil).Create), arg0)
}

// DeleteByKinds mocks base method
func (m *MockReports) DeleteByKinds(arg0 []model.ReportKind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKinds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKinds indicates an expected call of DeleteByKinds
func (mr *MockReportsMockRecorder) DeleteByKinds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKinds", reflect.TypeOf((*MockReports)(nil).DeleteByKinds), arg0)
}

// FindNotCompletedByIndexVersion mocks base method
func (m *MockReports) FindNotCompletedByIndexVersion(arg0 int64, arg1 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByIndexVersion", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByIndexVersion indicates an expected call of FindNotCompletedByIndexVersion
func (mr *MockReportsMockRecorder) FindNotCompletedByIndexVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByIndexVersion", reflect.TypeOf((*MockReports)(nil).FindNotCompletedByIndexVersion), varargs...)
}

// FindNotCompletedByKind mocks base method
func (m *MockReports) FindNotCompletedByKind(arg0 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByKind", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByKind indicates an expected call of FindNotCompletedByKind
func (mr *MockReportsMockRecorder) FindNotCompletedByKind(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByKind", reflect.TypeOf((*MockReports)(nil).FindNotCompletedByKind), arg0...)
}

// Last mocks base method
func (m *MockReports) Last() (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockReportsMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockReports)(nil).Last))
}

// Save mocks base method
func (m *MockReports) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockReportsMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReports)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockReports) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReportsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReports)(nil).Update), arg0)
}

// MockRewards is a mock of Rewards interface
type MockRewards struct {
	ctrl     *gomock.Controller
	recorder *MockRewardsMockRecorder
}

// MockRewardsMockRecorder is the mock recorder for MockRewards
type MockRewardsMockRecorder struct {
	mock *MockRewards
}

// NewMockRewards creates a new mock instance
func NewMockRewards(ctrl *gomock.Controller) *MockRewards {
	mock := &MockRewards{ctrl: ctrl}
	mock.recorder = &MockRewardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRewards) EXPECT() *MockRewardsMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockRewards) BulkUpsert(arg0 []model.RewardEraSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockRewardsMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockRewards)(nil).BulkUpsert), arg0)
}

// GetAll mocks base method
func (m *MockRewards) GetAll(arg0, arg1 string, arg2, arg3 int64) ([]model.RewardEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.RewardEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRewardsMockRecorder) GetAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRewards)(nil).GetAll), arg0, arg1, arg2, arg3)
}

// GetByStashAndEra mocks base method
func (m *MockRewards) GetByStashAndEra(arg0, arg1 string, arg2 int64) (model.RewardEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStashAndEra", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.RewardEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStashAndEra indicates an expected call of GetByStashAndEra
func (mr *MockRewardsMockRecorder) GetByStashAndEra(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStashAndEra", reflect.TypeOf((*MockRewards)(nil).GetByStashAndEra), arg0, arg1, arg2)
}

// GetCount mocks base method
func (m *MockRewards) GetCount(arg0 string, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount
func (mr *MockRewardsMockRecorder) GetCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockRewards)(nil).GetCount), arg0, arg1)
}

// MarkAllClaimed mocks base method
func (m *MockRewards) MarkAllClaimed(arg0 string, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllClaimed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAllClaimed indicates an expected call of MarkAllClaimed
func (mr *MockRewardsMockRecorder) MarkAllClaimed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllClaimed", reflect.TypeOf((*MockRewards)(nil).MarkAllClaimed), arg0, arg1, arg2)
}

// MockSyncables is a mock of Syncables interface
type MockSyncables struct {
	ctrl     *gomock.Controller
	recorder *MockSyncablesMockRecorder
}

// MockSyncablesMockRecorder is the mock recorder for MockSyncables
type MockSyncablesMockRecorder struct {
	mock *MockSyncables
}

// NewMockSyncables creates a new mock instance
func NewMockSyncables(ctrl *gomock.Controller) *MockSyncables {
	mock := &MockSyncables{ctrl: ctrl}
	mock.recorder = &MockSyncablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncables) EXPECT() *MockSyncablesMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncables) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncablesMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncables)(nil).CreateOrUpdate), arg0)
}

// FindAllByLastInSessionOrEra mocks base method
func (m *MockSyncables) FindAllByLastInSessionOrEra(arg0 int64, arg1, arg2 bool, arg3, arg4 int64) ([]model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByLastInSessionOrEra", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByLastInSessionOrEra indicates an expected call of FindAllByLastInSessionOrEra
func (mr *MockSyncablesMockRecorder) FindAllByLastInSessionOrEra(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByLastInSessionOrEra", reflect.TypeOf((*MockSyncables)(nil).FindAllByLastInSessionOrEra), arg0, arg1, arg2, arg3, arg4)
}

// FindByHeight mocks base method
func (m *MockSyncables) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncablesMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncables)(nil).FindByHeight), arg0)
}

// FindFirstByDifferentIndexVersion mocks base method
func (m *MockSyncables) FindFirstByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByDifferentIndexVersion indicates an expected call of FindFirstByDifferentIndexVersion
func (mr *MockSyncablesMockRecorder) FindFirstByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByDifferentIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindFirstByDifferentIndexVersion), arg0)
}

// FindLastEndOfEra mocks base method
func (m *MockSyncables) FindLastEndOfEra() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEndOfEra")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEndOfEra indicates an expected call of FindLastEndOfEra
func (mr *MockSyncablesMockRecorder) FindLastEndOfEra() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEndOfEra", reflect.TypeOf((*MockSyncables)(nil).FindLastEndOfEra))
}

// FindLastEndOfSession mocks base method
func (m *MockSyncables) FindLastEndOfSession() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEndOfSession")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEndOfSession indicates an expected call of FindLastEndOfSession
func (mr *MockSyncablesMockRecorder) FindLastEndOfSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEndOfSession", reflect.TypeOf((*MockSyncables)(nil).FindLastEndOfSession))
}

// FindLastInEra mocks base method
func (m *MockSyncables) FindLastInEra(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastInEra", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastInEra indicates an expected call of FindLastInEra
func (mr *MockSyncablesMockRecorder) FindLastInEra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastInEra", reflect.TypeOf((*MockSyncables)(nil).FindLastInEra), arg0)
}

// FindLastInSession mocks base method
func (m *MockSyncables) FindLastInSession(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastInSession", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastInSession indicates an expected call of FindLastInSession
func (mr *MockSyncablesMockRecorder) FindLastInSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastInSession", reflect.TypeOf((*MockSyncables)(nil).FindLastInSession), arg0)
}

// FindLastInSessionForHeight mocks base method
func (m *MockSyncables) FindLastInSessionForHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastInSessionForHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastInSessionForHeight indicates an expected call of FindLastInSessionForHeight
func (mr *MockSyncablesMockRecorder) FindLastInSessionForHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastInSessionForHeight", reflect.TypeOf((*MockSyncables)(nil).FindLastInSessionForHeight), arg0)
}

// FindMostRecent mocks base method
func (m *MockSyncables) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSyncablesMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSyncables)(nil).FindMostRecent))
}

// FindMostRecentByDifferentIndexVersion mocks base method
func (m *MockSyncables) FindMostRecentByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByDifferentIndexVersion indicates an expected call of FindMostRecentByDifferentIndexVersion
func (mr *MockSyncablesMockRecorder) FindMostRecentByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByDifferentIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindMostRecentByDifferentIndexVersion), arg0)
}

// FindSmallestIndexVersion mocks base method
func (m *MockSyncables) FindSmallestIndexVersion() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSmallestIndexVersion")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSmallestIndexVersion indicates an expected call of FindSmallestIndexVersion
func (mr *MockSyncablesMockRecorder) FindSmallestIndexVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSmallestIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindSmallestIndexVersion))
}

// SaveSyncable mocks base method
func (m *MockSyncables) SaveSyncable(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSyncable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSyncable indicates an expected call of SaveSyncable
func (mr *MockSyncablesMockRecorder) SaveSyncable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSyncable", reflect.TypeOf((*MockSyncables)(nil).SaveSyncable), arg0)
}

// SetProcessedAtForRange mocks base method
func (m *MockSyncables) SetProcessedAtForRange(arg0 types.ID, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessedAtForRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessedAtForRange indicates an expected call of SetProcessedAtForRange
func (mr *MockSyncablesMockRecorder) SetProcessedAtForRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessedAtForRange", reflect.TypeOf((*MockSyncables)(nil).SetProcessedAtForRange), arg0, arg1, arg2)
}

// MockSystemEvents is a mock of SystemEvents interface
type MockSystemEvents struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventsMockRecorder
}

// MockSystemEventsMockRecorder is the mock recorder for MockSystemEvents
type MockSystemEventsMockRecorder struct {
	mock *MockSystemEvents
}

// NewMockSystemEvents creates a new mock instance
func NewMockSystemEvents(ctrl *gomock.Controller) *MockSystemEvents {
	mock := &MockSystemEvents{ctrl: ctrl}
	mock.recorder = &MockSystemEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemEvents) EXPECT() *MockSystemEventsMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockSystemEvents) BulkUpsert(arg0 []model.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockSystemEventsMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockSystemEvents)(nil).BulkUpsert), arg0)
}

// FindByActor mocks base method
func (m *MockSystemEvents) FindByActor(arg0 string, arg1 *model.SystemEventKind, arg2 *int64) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActor", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActor indicates an expected call of FindByActor
func (mr *MockSystemEventsMockRecorder) FindByActor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActor", reflect.TypeOf((*MockSystemEvents)(nil).FindByActor), arg0, arg1, arg2)
}

// MockTransactionSeq is a mock of TransactionSeq interface
type MockTransactionSeq struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSeqMockRecorder
}

// MockTransactionSeqMockRecorder is the mock recorder for MockTransactionSeq
type MockTransactionSeqMockRecorder struct {
	mock *MockTransactionSeq
}

// NewMockTransactionSeq creates a new mock instance
func NewMockTransactionSeq(ctrl *gomock.Controller) *MockTransactionSeq {
	mock := &MockTransactionSeq{ctrl: ctrl}
	mock.recorder = &MockTransactionSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionSeq) EXPECT() *MockTransactionSeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockTransactionSeq) BulkUpsert(arg0 []model.TransactionSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockTransactionSeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockTransactionSeq)(nil).BulkUpsert), arg0)
}

// GetTransactionsByTransactionKind mocks base method
func (m *MockTransactionSeq) GetTransactionsByTransactionKind(arg0 model.TransactionKind, arg1, arg2 int64) ([]model.TransactionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByTransactionKind", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.TransactionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByTransactionKind indicates an expected call of GetTransactionsByTransactionKind
func (mr *MockTransactionSeqMockRecorder) GetTransactionsByTransactionKind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByTransactionKind", reflect.TypeOf((*MockTransactionSeq)(nil).GetTransactionsByTransactionKind), arg0, arg1, arg2)
}

// MockValidatorAgg is a mock of ValidatorAgg interface
type MockValidatorAgg struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggMockRecorder
}

// MockValidatorAggMockRecorder is the mock recorder for MockValidatorAgg
type MockValidatorAggMockRecorder struct {
	mock *MockValidatorAgg
}

// NewMockValidatorAgg creates a new mock instance
func NewMockValidatorAgg(ctrl *gomock.Controller) *MockValidatorAgg {
	mock := &MockValidatorAgg{ctrl: ctrl}
	mock.recorder = &MockValidatorAggMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAgg) EXPECT() *MockValidatorAggMockRecorder {
	return m.recorder
}

// CreateAgg mocks base method
func (m *MockValidatorAgg) CreateAgg(arg0 *model.ValidatorAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgg indicates an expected call of CreateAgg
func (mr *MockValidatorAggMockRecorder) CreateAgg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgg", reflect.TypeOf((*MockValidatorAgg)(nil).CreateAgg), arg0)
}

// FindAggByStashAccount mocks base method
func (m *MockValidatorAgg) FindAggByStashAccount(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAggByStashAccount", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAggByStashAccount indicates an expected call of FindAggByStashAccount
func (mr *MockValidatorAggMockRecorder) FindAggByStashAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAggByStashAccount", reflect.TypeOf((*MockValidatorAgg)(nil).FindAggByStashAccount), arg0)
}

// FindBy mocks base method
func (m *MockValidatorAgg) FindBy(arg0 string, arg1 interface{}) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockValidatorAggMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockValidatorAgg)(nil).FindBy), arg0, arg1)
}

// FindByID mocks base method
func (m *MockValidatorAgg) FindByID(arg0 int64) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockValidatorAggMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockValidatorAgg)(nil).FindByID), arg0)
}

// GetAllForHeightGreaterThan mocks base method
func (m *MockValidatorAgg) GetAllForHeightGreaterThan(arg0 int64) ([]model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForHeightGreaterThan", arg0)
	ret0, _ := ret[0].([]model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForHeightGreaterThan indicates an expected call of GetAllForHeightGreaterThan
func (mr *MockValidatorAggMockRecorder) GetAllForHeightGreaterThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForHeightGreaterThan", reflect.TypeOf((*MockValidatorAgg)(nil).GetAllForHeightGreaterThan), arg0)
}

// SaveAgg mocks base method
func (m *MockValidatorAgg) SaveAgg(arg0 *model.ValidatorAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAgg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAgg indicates an expected call of SaveAgg
func (mr *MockValidatorAggMockRecorder) SaveAgg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAgg", reflect.TypeOf((*MockValidatorAgg)(nil).SaveAgg), arg0)
}

// MockValidatorSeq is a mock of ValidatorSeq interface
type MockValidatorSeq struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqMockRecorder
}

// MockValidatorSeqMockRecorder is the mock recorder for MockValidatorSeq
type MockValidatorSeqMockRecorder struct {
	mock *MockValidatorSeq
}

// NewMockValidatorSeq creates a new mock instance
func NewMockValidatorSeq(ctrl *gomock.Controller) *MockValidatorSeq {
	mock := &MockValidatorSeq{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeq) EXPECT() *MockValidatorSeqMockRecorder {
	return m.recorder
}

// BulkUpsertSeqs mocks base method
func (m *MockValidatorSeq) BulkUpsertSeqs(arg0 []model.ValidatorSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsertSeqs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsertSeqs indicates an expected call of BulkUpsertSeqs
func (mr *MockValidatorSeqMockRecorder) BulkUpsertSeqs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertSeqs", reflect.TypeOf((*MockValidatorSeq)(nil).BulkUpsertSeqs), arg0)
}

// DeleteSeqsOlderThan mocks base method
func (m *MockValidatorSeq) DeleteSeqsOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeqsOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSeqsOlderThan indicates an expected call of DeleteSeqsOlderThan
func (mr *MockValidatorSeqMockRecorder) DeleteSeqsOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeqsOlderThan", reflect.TypeOf((*MockValidatorSeq)(nil).DeleteSeqsOlderThan), arg0)
}

// FindAllByHeight mocks base method
func (m *MockValidatorSeq) FindAllByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByHeight indicates an expected call of FindAllByHeight
func (mr *MockValidatorSeqMockRecorder) FindAllByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByHeight", reflect.TypeOf((*MockValidatorSeq)(nil).FindAllByHeight), arg0)
}

// FindMostRecentSeq mocks base method
func (m *MockValidatorSeq) FindMostRecentSeq() (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentSeq")
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentSeq indicates an expected call of FindMostRecentSeq
func (mr *MockValidatorSeqMockRecorder) FindMostRecentSeq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentSeq", reflect.TypeOf((*MockValidatorSeq)(nil).FindMostRecentSeq))
}

// MockValidatorEraSeq is a mock of ValidatorEraSeq interface
type MockValidatorEraSeq struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorEraSeqMockRecorder
}

// MockValidatorEraSeqMockRecorder is the mock recorder for MockValidatorEraSeq
type MockValidatorEraSeqMockRecorder struct {
	mock *MockValidatorEraSeq
}

// NewMockValidatorEraSeq creates a new mock instance
func NewMockValidatorEraSeq(ctrl *gomock.Controller) *MockValidatorEraSeq {
	mock := &MockValidatorEraSeq{ctrl: ctrl}
	mock.recorder = &MockValidatorEraSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorEraSeq) EXPECT() *MockValidatorEraSeqMockRecorder {
	return m.recorder
}

// BulkUpsertEraSeqs mocks base method
func (m *MockValidatorEraSeq) BulkUpsertEraSeqs(arg0 []model.ValidatorEraSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsertEraSeqs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsertEraSeqs indicates an expected call of BulkUpsertEraSeqs
func (mr *MockValidatorEraSeqMockRecorder) BulkUpsertEraSeqs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertEraSeqs", reflect.TypeOf((*MockValidatorEraSeq)(nil).BulkUpsertEraSeqs), arg0)
}

// DeleteEraSeqsOlderThan mocks base method
func (m *MockValidatorEraSeq) DeleteEraSeqsOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEraSeqsOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEraSeqsOlderThan indicates an expected call of DeleteEraSeqsOlderThan
func (mr *MockValidatorEraSeqMockRecorder) DeleteEraSeqsOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEraSeqsOlderThan", reflect.TypeOf((*MockValidatorEraSeq)(nil).DeleteEraSeqsOlderThan), arg0)
}

// FindByEra mocks base method
func (m *MockValidatorEraSeq) FindByEra(arg0 int64) ([]model.ValidatorEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEra", arg0)
	ret0, _ := ret[0].([]model.ValidatorEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEra indicates an expected call of FindByEra
func (mr *MockValidatorEraSeqMockRecorder) FindByEra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEra", reflect.TypeOf((*MockValidatorEraSeq)(nil).FindByEra), arg0)
}

// FindByEraAndStashAccount mocks base method
func (m *MockValidatorEraSeq) FindByEraAndStashAccount(arg0 int64, arg1 string) (*model.ValidatorEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEraAndStashAccount", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEraAndStashAccount indicates an expected call of FindByEraAndStashAccount
func (mr *MockValidatorEraSeqMockRecorder) FindByEraAndStashAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEraAndStashAccount", reflect.TypeOf((*MockValidatorEraSeq)(nil).FindByEraAndStashAccount), arg0, arg1)
}

// FindEraSeqsByHeight mocks base method
func (m *MockValidatorEraSeq) FindEraSeqsByHeight(arg0 int64) ([]model.ValidatorEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEraSeqsByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEraSeqsByHeight indicates an expected call of FindEraSeqsByHeight
func (mr *MockValidatorEraSeqMockRecorder) FindEraSeqsByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEraSeqsByHeight", reflect.TypeOf((*MockValidatorEraSeq)(nil).FindEraSeqsByHeight), arg0)
}

// FindLastEraSeqByStashAccount mocks base method
func (m *MockValidatorEraSeq) FindLastEraSeqByStashAccount(arg0 string, arg1 int64) ([]model.ValidatorEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEraSeqByStashAccount", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEraSeqByStashAccount indicates an expected call of FindLastEraSeqByStashAccount
func (mr *MockValidatorEraSeqMockRecorder) FindLastEraSeqByStashAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEraSeqByStashAccount", reflect.TypeOf((*MockValidatorEraSeq)(nil).FindLastEraSeqByStashAccount), arg0, arg1)
}

// FindMostRecentEraSeq mocks base method
func (m *MockValidatorEraSeq) FindMostRecentEraSeq() (*model.ValidatorEraSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentEraSeq")
	ret0, _ := ret[0].(*model.ValidatorEraSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentEraSeq indicates an expected call of FindMostRecentEraSeq
func (mr *MockValidatorEraSeqMockRecorder) FindMostRecentEraSeq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentEraSeq", reflect.TypeOf((*MockValidatorEraSeq)(nil).FindMostRecentEraSeq))
}

// SummarizeEraSeqs mocks base method
func (m *MockValidatorEraSeq) SummarizeEraSeqs(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]model.ValidatorEraSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeEraSeqs", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorEraSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeEraSeqs indicates an expected call of SummarizeEraSeqs
func (mr *MockValidatorEraSeqMockRecorder) SummarizeEraSeqs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeEraSeqs", reflect.TypeOf((*MockValidatorEraSeq)(nil).SummarizeEraSeqs), arg0, arg1)
}

// MockValidatorSessionSeq is a mock of ValidatorSessionSeq interface
type MockValidatorSessionSeq struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSessionSeqMockRecorder
}

// MockValidatorSessionSeqMockRecorder is the mock recorder for MockValidatorSessionSeq
type MockValidatorSessionSeqMockRecorder struct {
	mock *MockValidatorSessionSeq
}

// NewMockValidatorSessionSeq creates a new mock instance
func NewMockValidatorSessionSeq(ctrl *gomock.Controller) *MockValidatorSessionSeq {
	mock := &MockValidatorSessionSeq{ctrl: ctrl}
	mock.recorder = &MockValidatorSessionSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSessionSeq) EXPECT() *MockValidatorSessionSeqMockRecorder {
	return m.recorder
}

// BulkUpsertSessionSeqs mocks base method
func (m *MockValidatorSessionSeq) BulkUpsertSessionSeqs(arg0 []model.ValidatorSessionSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsertSessionSeqs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsertSessionSeqs indicates an expected call of BulkUpsertSessionSeqs
func (mr *MockValidatorSessionSeqMockRecorder) BulkUpsertSessionSeqs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertSessionSeqs", reflect.TypeOf((*MockValidatorSessionSeq)(nil).BulkUpsertSessionSeqs), arg0)
}

// DeleteSessionSeqsOlderThan mocks base method
func (m *MockValidatorSessionSeq) DeleteSessionSeqsOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionSeqsOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSessionSeqsOlderThan indicates an expected call of DeleteSessionSeqsOlderThan
func (mr *MockValidatorSessionSeqMockRecorder) DeleteSessionSeqsOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionSeqsOlderThan", reflect.TypeOf((*MockValidatorSessionSeq)(nil).DeleteSessionSeqsOlderThan), arg0)
}

// FindBySession mocks base method
func (m *MockValidatorSessionSeq) FindBySession(arg0 int64) ([]model.ValidatorSessionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySession", arg0)
	ret0, _ := ret[0].([]model.ValidatorSessionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySession indicates an expected call of FindBySession
func (mr *MockValidatorSessionSeqMockRecorder) FindBySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySession", reflect.TypeOf((*MockValidatorSessionSeq)(nil).FindBySession), arg0)
}

// FindBySessionAndStashAccount mocks base method
func (m *MockValidatorSessionSeq) FindBySessionAndStashAccount(arg0 int64, arg1 string) (*model.ValidatorSessionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySessionAndStashAccount", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSessionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySessionAndStashAccount indicates an expected call of FindBySessionAndStashAccount
func (mr *MockValidatorSessionSeqMockRecorder) FindBySessionAndStashAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySessionAndStashAccount", reflect.TypeOf((*MockValidatorSessionSeq)(nil).FindBySessionAndStashAccount), arg0, arg1)
}

// FindLastSessionSeqByStashAccount mocks base method
func (m *MockValidatorSessionSeq) FindLastSessionSeqByStashAccount(arg0 string, arg1 int64) ([]model.ValidatorSessionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastSessionSeqByStashAccount", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSessionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastSessionSeqByStashAccount indicates an expected call of FindLastSessionSeqByStashAccount
func (mr *MockValidatorSessionSeqMockRecorder) FindLastSessionSeqByStashAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastSessionSeqByStashAccount", reflect.TypeOf((*MockValidatorSessionSeq)(nil).FindLastSessionSeqByStashAccount), arg0, arg1)
}

// FindMostRecentSessionSeq mocks base method
func (m *MockValidatorSessionSeq) FindMostRecentSessionSeq() (*model.ValidatorSessionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentSessionSeq")
	ret0, _ := ret[0].(*model.ValidatorSessionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentSessionSeq indicates an expected call of FindMostRecentSessionSeq
func (mr *MockValidatorSessionSeqMockRecorder) FindMostRecentSessionSeq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentSessionSeq", reflect.TypeOf((*MockValidatorSessionSeq)(nil).FindMostRecentSessionSeq))
}

// FindSessionSeqsByHeight mocks base method
func (m *MockValidatorSessionSeq) FindSessionSeqsByHeight(arg0 int64) ([]model.ValidatorSessionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSessionSeqsByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSessionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSessionSeqsByHeight indicates an expected call of FindSessionSeqsByHeight
func (mr *MockValidatorSessionSeqMockRecorder) FindSessionSeqsByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSessionSeqsByHeight", reflect.TypeOf((*MockValidatorSessionSeq)(nil).FindSessionSeqsByHeight), arg0)
}

// SummarizeSessionSeqs mocks base method
func (m *MockValidatorSessionSeq) SummarizeSessionSeqs(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]model.ValidatorSessionSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeSessionSeqs", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSessionSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeSessionSeqs indicates an expected call of SummarizeSessionSeqs
func (mr *MockValidatorSessionSeqMockRecorder) SummarizeSessionSeqs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeSessionSeqs", reflect.TypeOf((*MockValidatorSessionSeq)(nil).SummarizeSessionSeqs), arg0, arg1)
}

// MockValidatorSummary is a mock of ValidatorSummary interface
type MockValidatorSummary struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSummaryMockRecorder
}

// MockValidatorSummaryMockRecorder is the mock recorder for MockValidatorSummary
type MockValidatorSummaryMockRecorder struct {
	mock *MockValidatorSummary
}

// NewMockValidatorSummary creates a new mock instance
func NewMockValidatorSummary(ctrl *gomock.Controller) *MockValidatorSummary {
	mock := &MockValidatorSummary{ctrl: ctrl}
	mock.recorder = &MockValidatorSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSummary) EXPECT() *MockValidatorSummaryMockRecorder {
	return m.recorder
}

// CreateSummary mocks base method
func (m *MockValidatorSummary) CreateSummary(arg0 *model.ValidatorSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSummary indicates an expected call of CreateSummary
func (mr *MockValidatorSummaryMockRecorder) CreateSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSummary", reflect.TypeOf((*MockValidatorSummary)(nil).CreateSummary), arg0)
}

// DeleteSummaryOlderThan mocks base method
func (m *MockValidatorSummary) DeleteSummaryOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSummaryOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSummaryOlderThan indicates an expected call of DeleteSummaryOlderThan
func (mr *MockValidatorSummaryMockRecorder) DeleteSummaryOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSummaryOlderThan", reflect.TypeOf((*MockValidatorSummary)(nil).DeleteSummaryOlderThan), arg0, arg1)
}

// FindActivityPeriods mocks base method
func (m *MockValidatorSummary) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockValidatorSummaryMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockValidatorSummary)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecentByInterval mocks base method
func (m *MockValidatorSummary) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockValidatorSummaryMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockValidatorSummary)(nil).FindMostRecentByInterval), arg0)
}

// FindMostRecentSummary mocks base method
func (m *MockValidatorSummary) FindMostRecentSummary() (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentSummary")
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentSummary indicates an expected call of FindMostRecentSummary
func (mr *MockValidatorSummaryMockRecorder) FindMostRecentSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentSummary", reflect.TypeOf((*MockValidatorSummary)(nil).FindMostRecentSummary))
}

// FindSummaries mocks base method
func (m *MockValidatorSummary) FindSummaries(arg0 types.SummaryInterval, arg1 string) ([]store.ValidatorSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaries", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaries indicates an expected call of FindSummaries
func (mr *MockValidatorSummaryMockRecorder) FindSummaries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaries", reflect.TypeOf((*MockValidatorSummary)(nil).FindSummaries), arg0, arg1)
}

// FindSummary mocks base method
func (m *MockValidatorSummary) FindSummary(arg0 *model.ValidatorSummary) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockValidatorSummaryMockRecorder) FindSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockValidatorSummary)(nil).FindSummary), arg0)
}

// FindSummaryByStashAccount mocks base method
func (m *MockValidatorSummary) FindSummaryByStashAccount(arg0 string, arg1 types.SummaryInterval, arg2 string) ([]store.ValidatorSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaryByStashAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].([]store.ValidatorSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaryByStashAccount indicates an expected call of FindSummaryByStashAccount
func (mr *MockValidatorSummaryMockRecorder) FindSummaryByStashAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaryByStashAccount", reflect.TypeOf((*MockValidatorSummary)(nil).FindSummaryByStashAccount), arg0, arg1, arg2)
}

// SaveSummary mocks base method
func (m *MockValidatorSummary) SaveSummary(arg0 *model.ValidatorSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSummary indicates an expected call of SaveSummary
func (mr *MockValidatorSummaryMockRecorder) SaveSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSummary", reflect.TypeOf((*MockValidatorSummary)(nil).SaveSummary), arg0)
}
